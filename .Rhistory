{
xgb_sift_param <- cv_xgboost(sift_feature_train, label_train)
save(xgb_sift_param, file = "../output/xgb_sift_param.RData")
}
if(run.cv.xgb.hog)
{
xgb_hog_param <- cv_xgboost(hog_feature_train, label_train)
save(xgb_hog_param, file = "../output/xgb_hog_param.RData")
}
if(run.cv.xgb.sift.hog)
{
xgb_sift_hog_param <- cv_xgboost(sift_hog_feature_train, label_train)
save(xgb_sift_hog_param, file = "../output/xgb_hog_param.RData")
}
nrow(sift_hog_feature_train)
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_rgb_feature_train <- system.time(rgb_feature_train <- feature_rgb(img_train_dir, set_name = "train", data_name = "pets", export = T))
tm_pca_rgb_feature_train <- system.time(pca_rgb_feature_train <-
feature_pca(rgb_feature_train,
feature_name = "rgb",
set_name = "train",
data_name = "pets",
n = 100,
export = T))
}
tm_feature_test <- NA
if(run.feature.test){
tm_rgb_feature_test <- system.time(rgb_feature_test <- feature_rgb(img_test_dir, "test", data_name = "pets", export = T))
}
if(run.sift.features)
{
load("../output/feature_pet_train.Rdata")
sift_feature_train <- dat
load("../output/feature_pet_test.Rdata")
sift_feature_train <- rbind(sift_feature_train, dat)
sift_feature_test <- sift_feature_train[-train_index,]
sift_feature_train <- sift_feature_train[train_index,]
}
if(run.hog.features)
{
load("../output/feature_hog_train.Rdata")
hog_feature_train <- dat
hog_feature_test <- hog_feature_train[-train_index,]
hog_feature_train <- hog_feature_train[train_index,]
}
if(run.rgb.features)
{
rgb_feature_test <- rgb_feature_train[-train_index,]
rgb_feature_train <- rgb_feature_train[train_index,]
pca_rgb_feature_test <- pca_rgb_feature_train[-train_index,]
pca_rgb_feature_train <- pca_rgb_feature_train[train_index,]
}
if(run.sift.hog.features)
{
load("../output/feature_pet_train.Rdata")
sift_hog_feature_train <- dat
load("../output/feature_pet_test.Rdata")
sift_hog_feature_train <- rbind(sift_hog_feature_train, dat)
load("../output/feature_hog_train.Rdata")
sift_hog_feature_train <- cbind(sift_hog_feature_train, dat)
sift_hog_feature_test <- sift_hog_feature_train[-train_index,]
sift_hog_feature_train <- sift_hog_feature_train[train_index,]
}
source("../lib/cross_validation.R")
if(run.cv.xgb.rgb)
{
xgb_rgb_param <- cv_xgboost(rgb_feature_train, label_train)
xgb_rgb_pca_param <- cv_xgboost(rgb_feature_train, label_train)
save(xgb_rgb_param, file = "../output/xgb_rgb_param.RData")
save(xgb_rgb_pca_param, file = "../output/xgb_rgb_pca_param.RData")
}
if(run.cv.xgb.sift)
{
xgb_sift_param <- cv_xgboost(sift_feature_train, label_train)
save(xgb_sift_param, file = "../output/xgb_sift_param.RData")
}
if(run.cv.xgb.hog)
{
xgb_hog_param <- cv_xgboost(hog_feature_train, label_train)
save(xgb_hog_param, file = "../output/xgb_hog_param.RData")
}
if(run.cv.xgb.sift.hog)
{
xgb_sift_hog_param <- cv_xgboost(sift_hog_feature_train, label_train)
save(xgb_sift_hog_param, file = "../output/xgb_hog_param.RData")
}
run.cv            <- FALSE # run cross-validation on the training set
K                 <- 5    # number of CV folds
run.feature.train <- FALSE # process features for training set
run.test          <- FALSE # run evaluation on an independent test set
run.feature.test  <- FALSE # process features for test set
run.rgb.features <- FALSE
run.cv.xgb.rgb <- FALSE
run.xgb.rgb.train <- FALSE
run.xgb.rgb.test <- F
run.rgb.pca.features <- FALSE
run.cv.xgb.rgb.pca <- FALSE
run.xgb.rgb.pca.train <- FALSE
run.xgb.rgb.pca.test <- F
run.sift.features <- FALSE
run.cv.xgb.sift <- FALSE
run.xgb.sift.train <- FALSE
run.xgb.sift.test <- F
run.hog.features <- F
run.cv.xgb.hog <- F
run.xgb.hog.train <- F
run.xgb.hog.test <- F
run.sift.hog.features <- T
run.cv.xgb.sift.hog <- T
run.xgb.sift.hog.train <- T
run.xgb.sift.hog.test <- T
if(run.xgb.rgb.train)
{
tm_xgb_rgb_train <- system.time(xgb_rgb_train <- train_xgboost(rgb_feature_train, label_train, par = xgb_rgb_param))
save(xgb_rgb_train, file = "../output/xgb_rgb_train.RData")
}
if(run.xgb.rgb.pca.train)
{
tm_xgb_rgb_pca_train <- system.time(xgb_rgb_pca_train <- train_xgboost(rgb_feature_train, label_train, par = xgb_rgb_pca_param))
save(xgb_rgb_pca_train, file = "../output/xgb_rgb_pca_train.RData")
}
if(run.xgb.sift.train)
{
tm_xgb_sift_train <- system.time(xgb_sift_train <- train_xgboost(sift_feature_train, label_train, par = xgb_sift_param))
save(xgb_sift_train, file = "../output/xgb_sift_train.RData")
}
if(run.xgb.hog.train)
{
tm_xgb_hog_train <- system.time(xgb_hog_train <- train_xgboost(hog_feature_train, label_train, par = xgb_hog_param))
save(xgb_hog_train, file = "../output/xgb_hog_train.RData")
}
if(run.xgb.sift.hog.train)
{
tm_xgb_sift_hog_train <- system.time(xgb_sift_hog_train <- train_xgboost(sift_hog_feature_train, label_train, par = xgb_sift_hog_param))
save(sift_xgb_hog_train, file = "../output/xgb_sift_hog_train.RData")
}
if(run.xgb.rgb.train)
{
tm_xgb_rgb_train <- system.time(xgb_rgb_train <- train_xgboost(rgb_feature_train, label_train, par = xgb_rgb_param))
save(xgb_rgb_train, file = "../output/xgb_rgb_train.RData")
}
if(run.xgb.rgb.pca.train)
{
tm_xgb_rgb_pca_train <- system.time(xgb_rgb_pca_train <- train_xgboost(rgb_feature_train, label_train, par = xgb_rgb_pca_param))
save(xgb_rgb_pca_train, file = "../output/xgb_rgb_pca_train.RData")
}
if(run.xgb.sift.train)
{
tm_xgb_sift_train <- system.time(xgb_sift_train <- train_xgboost(sift_feature_train, label_train, par = xgb_sift_param))
save(xgb_sift_train, file = "../output/xgb_sift_train.RData")
}
if(run.xgb.hog.train)
{
tm_xgb_hog_train <- system.time(xgb_hog_train <- train_xgboost(hog_feature_train, label_train, par = xgb_hog_param))
save(xgb_hog_train, file = "../output/xgb_hog_train.RData")
}
if(run.xgb.sift.hog.train)
{
tm_xgb_sift_hog_train <- system.time(xgb_sift_hog_train <- train_xgboost(sift_hog_feature_train, label_train, par = xgb_sift_hog_param))
save(xgb_sift_hog_train, file = "../output/xgb_sift_hog_train.RData")
}
tm_test <- NA
if(run.xgb.rgb.test)
{
load(file = paste0("../output/xgb_rgb_train", ".RData"))
tm_xgb_rgb_test <- system.time(xgb_rgb_test <- test(xgb_rgb_train, rgb_feature_test))
mean(xgb_rgb_test == label_test)
}
if(run.xgb.rgb.pca.test)
{
load(file = paste0("../output/xgb_rgb_pca_train", ".RData"))
tm_xgb_rgb_pca_test <- system.time(xgb_rgb_pca_test <- test(xgb_rgb_pca_train, pca_rgb_feature_test))
mean(xgb_rgb_pca_test == label_test)
}
if(run.xgb.sift.test)
{
load(file = paste0("../output/xgb_sift_train", ".RData"))
tm_xgb_sift_test <- system.time(xgb_sift_test <- test(xgb_sift_train, sift_feature_test))
mean(xgb_sift_test == label_test)
}
if(run.xgb.hog.test)
{
load(file = paste0("../output/xgb_hog_train", ".RData"))
tm_xgb_hog_test <- system.time(xgb_hog_test <- test(xgb_hog_train, hog_feature_test))
mean(xgb_hog_test == label_test)
}
if(run.xgb.sift.hog.test)
{
load(file = paste0("../output/xgb_sift_hog_train", ".RData"))
tm_xgb_sift_hog_test <- system.time(xgb_sift_hog_test <- test(xgb_sift_hog_train, sift_hog_feature_test))
mean(xgb_sift_hog_test == label_test)
}
cat("Time for training xgb_hog_model=", tm_xgb_sift_hog_train[1], "s \n")
cat("Time for making xgb_hog_prediction=", tm_xgb_sift_hog_test[1], "s \n")
xgb_sift_hog_test
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("randomForest")){
install.packages("randomForest")
}
if(!require("ppls")){
install.packages("ppls")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("xgboost")){
install.packages("xgboost")
}
library("EBImage")
library("gbm")
library("randomForest")
library("ppls")
library("caret")
library("xgboost")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("randomForest")){
install.packages("randomForest")
}
if(!require("ppls")){
install.packages("ppls")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("xgboost")){
install.packages("xgboost")
}
library("EBImage")
library("gbm")
library("randomForest")
library("ppls")
library("caret")
library("xgboost")
setwd("../Documents/GitHub/project-2-predictive-modelling-group-5-master/doc")
setwd("../Documents/GitHub/project-2-predictive-modelling-group-5/doc")
setwd("~/Documents/GitHub/project-2-predictive-modelling-group-5/doc")
# Replace the above with your own path or manually set it in RStudio to where this rmd file is located.
experiment_dir <- "../data/" # This will be modified for different data sets.
img_train_dir  <- paste(experiment_dir, "train/", sep="")
img_test_dir   <- paste(experiment_dir, "test/", sep="")
run.cv            <- FALSE # run cross-validation on the training set
K                 <- 5    # number of CV folds
run.feature.train <- FALSE # process features for training set
run.test          <- TRUE # run evaluation on an independent test set
run.feature.test  <- TRUE # process features for test set
#swithes for testing xgboost with different feature selections
run.sift.features <- FALSE
run.cv.xgb.sift <- FALSE
run.xgb.sift.train <- FALSE
run.xgb.sift.test <- F
run.hog.features <- F
run.cv.xgb.hog <- F
run.xgb.hog.train <- F
run.xgb.hog.test <- F
run.sift.hog.features <- F
run.cv.xgb.sift.hog <- F
run.xgb.sift.hog.train <- T
run.xgb.sift.hog.test <- T
#For baseline model
model_values <- seq(3, 11, 2)
model_labels <- paste("GBM with depth =", model_values)
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep = ""), header = F)
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep = ""), header = F)
experiment_dir <- "../data/pets/ # This will be modified for different data sets.
img_train_dir  <- paste(experiment_dir, "train/", sep="")
experiment_dir <- "../data/pets/" # This will be modified for different data sets.
img_train_dir  <- paste(experiment_dir, "train/", sep="")
img_test_dir   <- paste(experiment_dir, "test/", sep="")
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep = ""), header = F)
label_train <- as.numeric(unlist(label_train) == "dog")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("randomForest")){
install.packages("randomForest")
}
if(!require("ppls")){
install.packages("ppls")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("xgboost")){
install.packages("xgboost")
}
library("EBImage")
library("gbm")
library("randomForest")
library("ppls")
library("caret")
library("xgboost")
setwd("~/Documents/GitHub/project-2-predictive-modelling-group-5/doc")
# Replace the above with your own path or manually set it in RStudio to where this rmd file is located.
experiment_dir <- "../data/pets/" # This will be modified for different data sets.
img_train_dir  <- paste(experiment_dir, "train/", sep="")
img_test_dir   <- paste(experiment_dir, "test/", sep="")
run.cv            <- FALSE # run cross-validation on the training set
K                 <- 5    # number of CV folds
run.feature.train <- FALSE # process features for training set
run.test          <- TRUE # run evaluation on an independent test set
run.feature.test  <- FALSE # process features for test set
#swithes for testing xgboost with different feature selections
run.sift.features <- FALSE
run.cv.xgb.sift <- FALSE
run.xgb.sift.train <- FALSE
run.xgb.sift.test <- F
run.hog.features <- F
run.cv.xgb.hog <- F
run.xgb.hog.train <- F
run.xgb.hog.test <- F
run.sift.hog.features <- F
run.cv.xgb.sift.hog <- F
run.xgb.sift.hog.train <- T
run.xgb.sift.hog.test <- T
#For baseline model
model_values <- seq(3, 11, 2)
model_labels <- paste("GBM with depth =", model_values)
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep = ""), header = F)
label_train <- as.numeric(unlist(label_train) == "dog")
source("../lib/train.R")
source("../lib/test.R")
load("/Users/Chris/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/4B0E5E64-CBB9-4797-8B8A-78CF307F30A8/pred_test.RData")
pred_test
install.packages("xlsx")
write.xlsx(pred_test, "../output/baseline_test")
library(xlsx)
write.xlsx(pred_test, "../output/baseline_test")
library(xlsx)
library(xlsx)
install.packages("xlsx", dependencies = T)
library(xlsx)
load("/Users/Chris/Documents/GitHub/project-2-predictive-modelling-group-5/output/feature_pet_test.RData")
load("/Users/Chris/Documents/GitHub/project-2-predictive-modelling-group-5/output/feature_pet_test.RData")
dat
load("/Users/Chris/Documents/GitHub/project-2-predictive-modelling-group-5/output/feature_pet_test.RData")
load(file = paste0("../output/xgb_sift_hog_train", ".RData"))
View(dat)
rm(list = ls())
load("/Users/Chris/Documents/GitHub/project-2-predictive-modelling-group-5/output/feature_pet_test.RData")
load(file = paste0("../output/xgb_sift_hog_train", ".RData"))
tm_xgb_sift_hog_test <- system.time(xgb_sift_hog_test <- test(xgb_sift_hog_train, dat))
xgb_sift_hog_test
source("../lib/train.R")
source("../lib/test.R")
tm_xgb_sift_hog_test <- system.time(xgb_sift_hog_test <- test(xgb_sift_hog_train, dat))
xgb_sift_hog_train
load("/Users/Chris/Downloads/xgb_sift_hog_train.RData")
xgb_sift_hog_train
tm_xgb_sift_hog_test <- system.time(xgb_sift_hog_test <- test(xgb_sift_hog_train, dat))
xgb_sift_hog_train
load("/Users/Chris/Downloads/feature_pet_test (1).RData")
load("/Users/Chris/Documents/GitHub/project-2-predictive-modelling-group-5/output/xgb_sift_hog_train.RData")
dgb_sift_hog_train
xgb_sift_hog_train
load("/Users/Chris/Documents/GitHub/project-2-predictive-modelling-group-5/output/xgb/xgb_sift_hog_train.RData")
xgb_sift_hog_train
load("/Users/Chris/Documents/GitHub/project-2-predictive-modelling-group-5/output/fit_train (1).RData")
fit_train
predict(fit_train, dat)
test(fit_train, dat)
source("../lib/train.R")
source("../lib/test.R")
tm_xgb_sift_hog_test <- system.time(xgb_sift_hog_test <- test(xgb_sift_hog_train, dat))
xgb_sift_hog_test
tm_xgb_sift_hog_test <- system.time(xgb_sift_hog_test <- test(fit_train, dat))
mean(xgb_sift_hog_test == label_test)
xgb_sift_hog_test
save(xgb_sift_hog_test, file = "../output/xgb_sift_hog_test.RData")
predict(fit_train, dat)
buildUI <- T
if(!require("lsa")){
install.packages("lsa")
}
if(!require("DescTools")){
install.packages("DescTools")
}
library("lsa")
library("DescTools")
setwd("/Users/Chris/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-3")
source("lib/functions.R")
setwd("~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-3")
source("lib/functions.R")
setwd("~/Documents/GitHub/project-2-predictive-modelling-group-5/doc")
set.seed(1234)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-3")
setwd("~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-3")
getwd()
unlink('Documents/GitHub/project-3-algorithms-project-3-algorithms-group-3/doc/Main_cache', recursive = TRUE)
setwd("~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-3")
source("lib/functions.R")
setwd("~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-3")
source("lib/functions.R")
if(!require("lsa")){
install.packages("lsa")
}
if(!require("DescTools")){
install.packages("DescTools")
}
library("lsa")
library("DescTools")
buildUI <- T
if(buildUI)
{
MS_train <- read.csv("data/MS_sample/data_train.csv", as.is = TRUE, header = TRUE)
MS_train <- MS_train[, 2:4]
MS_UI_train <- MS_data_transform(MS_train)
save(MS_UI_train, file = "MS_UI.RData")
save(MS_UI_train, file = "output/MS_UI_train.Rdata")
movie_train <- read.csv("data/eachmovie_sample/data_train.csv", as.is = TRUE, header = TRUE)
movie_train <- movie_train[, 2:4]
movie_UI_train <- movie_data_transform(movie_train)
save(movie_UI_train, file = "output/movie_UI_train.RData")
} else
{
load("output/MS_UI_train.Rdata")
load("output/movie_UI_train.Rdata")
}
if(!require("lsa")){
install.packages("lsa")
}
if(!require("DescTools")){
install.packages("DescTools")
}
library("lsa")
library("DescTools")
buildUI <- T
if(buildUI)
{
MS_train <- read.csv("data/MS_sample/data_train.csv", as.is = TRUE, header = TRUE)
MS_train <- MS_train[, 2:4]
MS_UI_train <- MS_data_transform(MS_train)
save(MS_UI_train, file = "MS_UI.RData")
save(MS_UI_train, file = "output/MS_UI_train.Rdata")
movie_train <- read.csv("data/eachmovie_sample/data_train.csv", as.is = TRUE, header = TRUE)
movie_train <- movie_train[, 2:4]
movie_UI_train <- movie_data_transform(movie_train)
save(movie_UI_train, file = "output/movie_UI_train.RData")
} else
{
load("output/MS_UI_train.Rdata")
load("output/movie_UI_train.Rdata")
}
setwd("~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-3")
source("lib/functions.R")
if(!require("lsa")){
install.packages("lsa")
}
if(!require("DescTools")){
install.packages("DescTools")
}
library("lsa")
library("DescTools")
buildUI <- T
if(buildUI)
{
MS_train <- read.csv("data/MS_sample/data_train.csv", as.is = TRUE, header = TRUE)
MS_train <- MS_train[, 2:4]
MS_UI_train <- MS_data_transform(MS_train)
save(MS_UI_train, file = "MS_UI.RData")
save(MS_UI_train, file = "output/MS_UI_train.Rdata")
movie_train <- read.csv("data/eachmovie_sample/data_train.csv", as.is = TRUE, header = TRUE)
movie_train <- movie_train[, 2:4]
movie_UI_train <- movie_data_transform(movie_train)
save(movie_UI_train, file = "output/movie_UI_train.RData")
} else
{
load("output/MS_UI_train.Rdata")
load("output/movie_UI_train.Rdata")
}
getwd()
getwd()
setwd("~/Documents/GitHub/project-2-predictive-modelling-group-5/doc")
getwd()
experiment_dir <- "../data/pets/"
experiment_dir
setwd("~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-3")
MS_train <- read.csv("data/MS_sample/data_train.csv", as.is = TRUE, header = TRUE)
setwd("~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-3")
setwd("~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-3")
source("lib/functions.R")
setwd("~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-3")
source("lib/functions.R")
source("lib/functions.R")
setwd("~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-3")
source("lib/functions.R")
setwd("~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-3")
source("lib/functions.R")
getwd()
source("lib/functions.R")
source("..lib/functions.R")
setwd("~/Documents/GitHub/project-3-algorithms-project-3-algorithms-group-3")
source("..lib/functions.R")
source("lib/functions.R")

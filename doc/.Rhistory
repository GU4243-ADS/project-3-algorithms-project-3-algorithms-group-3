coord_flip()
actor.coeffi %>%
ggplot(aes(x=actor.coeffi[,0],y=actor.coeffi[,1]))+
geom_col()+
coord_flip()
ggplot(actor.coeffi,aes(x=actor.coeffi[,0],y=actor.coeffi[,1]))+
geom_col()+
coord_flip()
lendgth(actor.coeffi[,0])
length(actor.coeffi[,0])
length(actor.coeffi)
class(actor.coeffi)
actor.coeffi[,1]
ggplot(actor.coeffi,aes(x=actor.coeffi[,0],y=actor.coeffi[,1]))+
geom_col()+
coord_flip()
length(actor.coeffi[,1])
length(actor.coeffi[,0])
length(actor.coeffi[,1])
actor.coeffi[,0]
dim(actor.coeffi[,0])
length(actor.coeffi[,0])
as.vector(actor.coeffi[,0])
keep.actor <- c("zachgalifianakis","willarnett","vindiesel","tomhanks","tomcruise","stevecarell","scarlettjohansson","ryanreynolds","robertdowneyjr","ralphfiennes","natalieportman","mattdamon","matthewmcconaughey","markwahlberg","kristenwiig","liamneeson","kristenstewart","kirstendunst","kevinhart","johnnydepp","josephgordonlevitt","johngoodman","jasonbateman","jenniferlawrence","jimcarrey","jamesfranco","hughjackman","harrisonford","gerardbutler","adamsandler","amyadams","angelinajolie","benstiller","bradleycooper","camerondiaz","cateblanchett","chrisevans","chrishemsworth","chrispine","dwaynejohnson","eddiemurphy","emmastone")
actor.coeffi <- as.data.frame(actor=keep.actor, influence.coefficient=actor.lm$coefficients[keep.actor])
keep.actor <- c("zachgalifianakis","willarnett","vindiesel","tomhanks","tomcruise","stevecarell","scarlettjohansson","ryanreynolds","robertdowneyjr","ralphfiennes","natalieportman","mattdamon","matthewmcconaughey","markwahlberg","kristenwiig","liamneeson","kristenstewart","kirstendunst","kevinhart","johnnydepp","josephgordonlevitt","johngoodman","jasonbateman","jenniferlawrence","jimcarrey","jamesfranco","hughjackman","harrisonford","gerardbutler","adamsandler","amyadams","angelinajolie","benstiller","bradleycooper","camerondiaz","cateblanchett","chrisevans","chrishemsworth","chrispine","dwaynejohnson","eddiemurphy","emmastone")
actor.coeffi <- data.frame(actor=keep.actor, influence.coefficient=actor.lm$coefficients[keep.actor])
actor.coeffi
dim(actor.coeffi)
actor.coeffi %>%
ggplot(actor.coeffi,aes(x=actor,y=influence.coefficient,fill=influence.coefficient))+
geom_col()+
coord_flip()
actor.coeffi %>%
ggplot(aes(x=actor,y=influence.coefficient,fill=influence.coefficient))+
geom_col()+
coord_flip()
actor.coeffi %>%
ggplot(aes(x=reorder(actor,-influence.coefficient),y=influence.coefficient,fill=influence.coefficient))+
geom_col()+
coord_flip()
actor.coeffi %>%
ggplot(aes(x=reorder(actor,influence.coefficient),y=influence.coefficient,fill=influence.coefficient))+
geom_col()+
coord_flip()
actor.coeffi %>%
ggplot(aes(x=reorder(actor,influence.coefficient),y=influence.coefficient,fill=influence.coefficient))+
geom_col()+
coord_flip()+
labs(x="actor")
movies.before %>%
arrange(desc(roi))
movies.before %>%
group_by(rating)
movies.before %>%
group_by(rating) %>%
ggplot(aex(x=rating,y=Box.Office.Gross))+
geom_boxplot()
movies.before %>%
group_by(rating) %>%
ggplot(aes(x=rating,y=Box.Office.Gross))+
geom_boxplot()
table(movies.before$rating)
movies.before %>%
filter(rating %in% c("R","PG","PG-13"))
group_by(rating) %>%
ggplot(aes(x=rating,y=Box.Office.Gross))+
geom_boxplot()
movies.before %>%
filter(rating %in% c("R","PG","PG-13"))
group_by(rating) %>%
ggplot(aes(x=rating,y=Box.Office.Gross))+
geom_boxplot()
movies.before %>%
filter(rating %in% c("R","PG","PG-13")) %>%
group_by(rating) %>%
ggplot(aes(x=rating,y=Box.Office.Gross))+
geom_boxplot()
movies.before %>%
arrange(desc(roi)) %>%
top_n(10)
movies.before %>%
arrange(roi) %>%
top_n(10)
movies.before %>%
arrange(roi)
movies.before %>%
arrange(roi) %>%
top_n(10)
movies.before %>%
arrange(roi) %>%
top_n(-10)
setwd("E:/GitHub/project-3-algorithms-project-3-algorithms-group-3")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
setwd("E:/GitHub/project-3-algorithms-project-3-algorithms-group-3")
source("E:/GitHub/project-3-algorithms-project-3-algorithms-group-3/lib/functions.R")
setwd("E:/GitHub/project-3-algorithms-project-3-algorithms-group-3/data/MS_sample")
# Load the data
MS_train <- read.csv("data_train.csv", as.is = TRUE, header = TRUE)
#MS_train <- MS_train[, 2:4]
head(MS_train)
setwd("E:/GitHub/project-3-algorithms-project-3-algorithms-group-3/data/MS_sample")
# Load the data
MS_train <- read.csv("data_train.csv", as.is = TRUE, header = TRUE)
MS_train <- MS_train[, 2:4]
head(MS_train)
# Transform from narrow to wide, i.e. user-item matrix
# using MS_data_transform function
# Below takes 2.17 minutes
MS_UI <- MS_data_transform(MS_train)
save(MS_UI, file = "MS_UI.RData")
MS_UI[1:10,1:10]
dim(MS_UI)
MS_UI[1:10,1:10]
# Matrix Calculations
visit_nums <- rowSums(MS_UI != 0)
table(visit_nums)
mean(visit_nums)
median(visit_nums)
# Looping instead of rowSums()
long.row.sums <- function(UI) {
vec <- rep(NA, nrow(UI))
for (i in 1:nrow(UI)) {
vec[i] <- sum(UI[i,], na.rm = TRUE)
}
return(vec)
}
system.time(long.row.sums(MS_UI))
system.time(rowSums(MS_UI, na.rm = TRUE))
vec <- long.row.sums(MS_UI)
all(vec == rowSums(MS_UI, na.rm = TRUE))
setwd("E:/GitHub/project-3-algorithms-project-3-algorithms-group-3/data/eachmovie_sample")
# Load the data
movie_train <- read.csv("data_train.csv", as.is = TRUE, header = TRUE)
movie_train <- movie_train[, 2:4]
head(movie_train)
# How we might fill in the user-item matrix using %in%
# Find sorted lists of users and vroots
users  <- sort(unique(movie_train$User))
movies <- sort(unique(movie_train$Movie))
length(users)
length(movies)
# Initiate the UI matrix
UI            <- matrix(NA, nrow = length(users), ncol = length(movies))
row.names(UI) <- users
colnames(UI)  <- movies
# We consider just user 1, finding user 1's movies and ratings
movies  <- movie_train$Movie[movie_train$User == users[1]]
ratings <- movie_train$Score[movie_train$User == users[1]]
# We consider just user 1, finding user 1's movies and ratings
movies  <- movie_train$Movie[movie_train$User == users[1]]
ratings <- movie_train$Score[movie_train$User == users[1]]
ord     <- order(movies)
movies  <- movies[ord]
ratings <- ratings[ord]
system.time(UI[1, colnames(UI) %in% movies] <- ratings)
# How we might fill in the user-item matrix using loops
long.in <- function(movies, ratings) {
# Cycle through the ratings, find the corresponding column
for (i in 1:length(ratings)) {
column <- which(colnames(UI) == movies[i])
UI[2, column] <- ratings[i]
print(column)
}
}
system.time(long.in(movies, ratings))
all(UI[1, ] == UI[2,], na.rm = TRUE)
# Compute the full matrix
# Below takes about 4 minutes
movie_UI <- movie_data_transform(movie_train)
save(movie_UI, file = "movie_UI.RData")
movie_UI[1:10,1:10]
# Some calculations
total_ratings <- rowSums(movie_UI, na.rm = TRUE)
table(total_ratings)
mean(total_ratings)
median(total_ratings)
# Initiate the similarity weight matrix
movie_UI         <- as.matrix(movie_UI)
movie_sim_weight <- matrix(NA, nrow = nrow(movie_UI), ncol = nrow(movie_UI))
# Can calculate Pearson correlation between two rows of UI matrix as:
rowA <- movie_UI[1, ]
rowB <- movie_UI[2, ]
cor(rowA, rowB, method = 'pearson', use = "pairwise.complete.obs")
# Another way:
joint_values <- !is.na(rowA) & !is.na(rowB)
cor(rowA[joint_values], rowB[joint_values], method = 'pearson')
# First fill in row 1 of the similarity matrix using apply
system.time(vec1 <- apply(movie_UI, 1, cor, movie_UI[1, ], method = 'pearson', use = "pairwise.complete.obs"))
# Now fill in row 1 of the similarity matrix looping over the columns and
# calculating pairwise correlations
long.way <- function(row.num) {
for(i in 1:nrow(movie_UI)) {
movie_sim_weight[row.num, i] <- cor(movie_UI[i, ], movie_UI[row.num, ], method = 'pearson', use = "pairwise.complete.obs")
}
}
system.time(long.way(1))
c(1,3,5) & c(1,3)
[1,3,5] & [1,3]
# Calculate the full weights on the movie data
# The below took 87 minutes on my Macbook, 35 on my iMac
movie_sim <- calc_weight(movie_UI)
save(movie_sim, file = "movie_sim.RData")
movie_sim[1:10,1:10]
# Calculate the full weights on the MS data
# The below took 30 minutes on my Macbook and 14 on my iMac
MS_sim <- calc_weight(MS_UI)
save(MS_sim, file = "MS_sim.RData")
MS_sim[1:10,1:10]
# Calculate the predictions for user 1
# Initiate the prediction matrix and find the columns we need to predict for user 1.
pred_mat        <- MS_UI
cols_to_predict <- which(MS_UI[1, ] == 0)
num_cols        <- length(cols_to_predict)
# Transform the UI matrix into a deviation matrix since we want to calculate weighted averages of the deviations
neighb_weights <- MS_sim[1, ]
row_avgs       <- apply(MS_UI, 1, mean, na.rm = TRUE)
dev_mat        <- MS_UI - matrix(rep(row_avgs, ncol(MS_UI)), ncol = ncol(MS_UI))
dim(dev_mat)
dev_mat[1:10,1:10]
# We'll calculate the predictions in two ways:
# First by looping over items where we want to make predictions
for (i in 1:num_cols) {
# For each column to predict, first find all deviations for that item
neighb_devs <- dev_mat[ ,cols_to_predict[i]]
# For each column to predict, calculate the prediction as the weighted average
pred_mat[1, cols_to_predict[i]] <- row_avgs[1] +  sum(neighb_devs * neighb_weights, na.rm = TRUE)/sum(neighb_weights, na.rm = TRUE)
}
# Now using matrix equations
pred_mat2 <- MS_UI
weight_mat  <- matrix(rep(neighb_weights, ncol(MS_UI)), ncol = ncol(MS_UI))
weight_sub  <- weight_mat[, cols_to_predict]
neighb_devs <- dev_mat[ ,cols_to_predict]
# Now fill in all of row 1 with matrix equations
pred_mat2[1, cols_to_predict] <- row_avgs[1] +  apply(neighb_devs * weight_sub, 2, sum, na.rm = TRUE)/sum(neighb_weights, na.rm = TRUE)
# They're the same
all(pred_mat2[1,] == pred_mat[1, ])
# Calculate predictions for movies
# This calculation took me 2493 second
movie_pred <- pred_matrix(movie_UI, movie_sim)
save(movie_pred, file = "movie_pred.RData")
movie_pred[1:10,1:10]
# Calculate predictions for MS
# This calculation took me 15 minutes
MS_pred <- pred_matrix(MS_UI, MS_sim)
save(MS_pred, file = "MS_pred.RData")
MS_pred[1:10,1:10]
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
MS_UI <- get(load("E:/GitHub/project-3-algorithms-project-3-algorithms-group-3/output/MS_UI.RData"))
movie_UI <- get(load("E:/GitHub/project-3-algorithms-project-3-algorithms-group-3/output/movie_UI.RData"))
head(MS_UI)
head(movie_UI)
MS_UI[1:10,1:10]
movie_UI[1:10,1:10]
MS_UI[1:10,1:10]
movie_UI[1:10,1:10]
MS_dist <- dist(MX_UI, method = "euclidean")
MS_dist <- dist(MS_UI, method = "euclidean")
MS_dist[1:5,1:5]
dim(MS_dist)
class(MS_dist)
dim(as.matrix(MS_dist))
dim(as.matrix(MS_dist))
as.matrix(MS_dist)[1:5,1:5]
set.seed(1990)
# we use the Ward criterion which aims to minimize the within-cluster variance
MS_clust <- hclust(MS_dist, method = "ward.D2")
plot(MS_clust)
h_cluster <- cutree(MS_clust, 10)
rect.hclust(MS_clust, k=10, border="red")
?rect.hclust
library(stats)
h_cluster <- cutree(MS_clust, 10)
rect.hclust(MS_clust, k=10, border="red")
h_cluster <- cutree(MS_clust, 10)
table(h_cluster)
hclust_summary <- aggregate(MS_UI,by=list(h_cluster),FUN=mean)
hclust_summary
set.seed(1990)
NbClust(data=MS_UI, min.nc=3, max.nc=15, index="all", method="ward.D2")
library(NbClust)
set.seed(1990)
NbClust(data=MS_UI, min.nc=3, max.nc=15, index="all", method="ward.D2")
set.seed(1990)
NbClust(data=MS_UI, min.nc=3, max.nc=15, method="ward.D2")
library(corrplot)
library(corrplot)
corrplot(cor(hclust_summary),order="hclust")
library(corrplot)
corrplot(cor(hclust_summary[,2:135]),order="hclust")
library(corrplot)
corrplot(cor(hclust_summary[,2:90]),order="hclust")
library(corrplot)
corrplot(cor(hclust_summary[,2:90]),order="hclust")
corrplot(cor(hclust_summary[,91:180]),order="hclust")
corrplot(cor(hclust_summary[,181:270]),order="hclust")
eigenval=eigen(cor(hclust_summary[,2:270]))
eigenval$values
plot(eigenval$values, main="Scree Plot", type="l")
plot(eigenval$values[1:20], main="Scree Plot", type="l")
plot(eigenval$values[1:15], main="Scree Plot", type="l")
library(nFactors)
install.packages("nFactors")
library(nFactors)
nScree(hclust_summary[,2:270], cor=TRUE)
library(psych)
fit <- principal(hclust_summary[,2:270],nfactors=9, rotate="varimax")
fit$loadings
fit$scores
fit$scores
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Can calculate Pearson correlation between two rows of UI matrix as:
rowA <- movie_UI[1, ]
rowB <- movie_UI[2, ]
cor(rowA, rowB, method = 'spearman', use = "pairwise.complete.obs")
movie_sim_spearman <- calc_weight(movie_UI,method=="spearman")
setwd("E:/GitHub/project-3-algorithms-project-3-algorithms-group-3")
source("E:/GitHub/project-3-algorithms-project-3-algorithms-group-3/lib/functions.R")
movie_sim_spearman <- calc_weight(movie_UI,method=="spearman")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
setwd("E:/GitHub/project-3-algorithms-project-3-algorithms-group-3")
source("E:/GitHub/project-3-algorithms-project-3-algorithms-group-3/lib/functions.R")
movie_sim_spearman <- calc_weight(movie_UI,method=="spearman")
movie_sim_spearman <- calc_weight(movie_UI,method="spearman")
save(movie_sim_spearman, file = "movie_sim_spearman.RData")
movie_sim_spearman[1:10,1:10]
MS_sim_spearman <- calc_weight(MS_UI,method="spearman")
save(MS_sim_spearman, file = "MS_sim_spearman.RData")
MS_sim_spearman[1:10,1:10]
rowA
head(rowA,20)
head(rowB,20)
joint_values <- !is.na(rowA) & !is.na(rowB)
joint_values
joint_values <- !is.na(rowA) & !is.na(rowB)
head(joint_values,20)
hmda_lar <- readRDS("C:/Users/Adimn/Desktop/hmda_lar.RDS")
dff
sdsds
d
dim(hmda_lar)
square(2)
length(rowA)
length(rowA[joint_values])
4^2
rowB[joint_values]
length(rowB[joint_values])
diff <- sum((rowA[joint_values]-rowB[joint_values])^2)/length(rowA[joint_values])
sim <- 1/(1+diff)
diff
sim
setwd("E:/GitHub/project-3-algorithms-project-3-algorithms-group-3")
source("E:/GitHub/project-3-algorithms-project-3-algorithms-group-3/lib/functions.R")
movie_sim_msd <- calc_weight(movie_UI,method="mean_squared_diff")
save(movie_sim_msd, file = "movie_sim_msd.RData")
movie_sim_msd[1:10,1:10]
MS_sim_msd <- calc_weight(MS_UI,method="mean_squared_diff")
save(MS_sim_msd, file = "MS_sim_msd.RData")
MS_sim_msd[1:10,1:10]
a <- matrix(rep(1,10),ncol=10)
a
MS_pred_spearman <- pred_matrix(MS_UI, MS_sim_spearman)
save(MS_pred_spearman, file = "MS_pred_spearman.RData")
MS_pred_spearman[1:10,1:10]
movie_pred_spearman <- pred_matrix(movie_UI, movie_sim_spearman)
save(movie_pred_spearman, file = "movie_pred_spearman.RData")
movie_pred_spearman[1:10,1:10]
movie_pred_spearman[1:10,1:10]
weight_mat <- matrix(0, nrow = nrow(MS_UI), ncol = nrow(MS_UI))
dim(weight_mat)
weight_mat <- matrix(0, nrow = nrow(MS_UI), ncol = nrow(MS_UI))
item_sim <- matrix(0,nrow=ncol(MS_UI),ncol=ncol(MS_UI))
dim(weight_mat)
dim(item_sim)
length(diag(weight_mat))
diag(weight_mat) <- 1
weight_mat[1:10,1:10]
diag(weight_mat) <- 1
diag(item_sim) <- 1
MS_UI[1:10,1:10]
rowA <- MS_UI[1, ]
rowB <- MS_UI[2, ]
MS_UI[MS_UI==0] <- NA
MS_UI[1:10,1:10]
joint_values <- !is.na(rowA) & !is.na(rowB)
joint_values
joint_values <- !is.na(rowA) & !is.na(rowB)
length(joint_values)
joint_values <- !is.na(rowA) & !is.na(rowB)
length(rowA[joint_values])
joint_values <- !is.na(rowA) & !is.na(rowB)
joint_values <- !is.na(rowA) & !is.na(rowB)
rowA[joint_values]
MS_UI[MS_UI==0] <- NA
MS_UI[1:10,1:10]
rowA <- MS_UI[1, ]
rowB <- MS_UI[2, ]
joint_values <- !is.na(rowA) & !is.na(rowB)
length(rowA[joint_values])
joint_values <- !is.na(rowA) & !is.na(rowB)
joint_values
rowA <- MS_UI[3, ]
rowB <- MS_UI[2, ]
joint_values <- !is.na(rowA) & !is.na(rowB)
length(rowA[joint_values])
joint_values <- !is.na(rowA) & !is.na(rowB)
length(rowA[joint_values])
rowA <- MS_UI[1, ]
rowB <- MS_UI[2, ]
joint_values <- !is.na(rowA) & !is.na(rowB)
length(rowA[joint_values])
length(rowA[!is.na(rowA)])
length(rowA[!is.na(rowB)])
length(rowA[!is.na(rowB)])
sum(rowA)
length(rowA[!is.na(rowB)])
sum(rowA,na.rm=T)
length(rowA[!is.na(rowA)])
sum(rowA,na.rm=T)
simAB <- 0.8*length(rowA[joint_values])/(sum(rowA,na.rm=T),sum(rowB,na.rm=T))
simAB <- 0.8*length(rowA[joint_values])/(sum(rowA,na.rm=T)*sum(rowB,na.rm=T))
simAB <- 0.8*length(rowA[joint_values])/(sum(rowA,na.rm=T)*sum(rowB,na.rm=T))
weight_mat[1,2] <- simAB
weight_mat[1:10,1:10]
weight_func <- function(rowA, rowB) {
joint_values <- !is.na(rowA) & !is.na(rowB)
return(0.8*length(rowA[joint_values])/(sum(rowA,na.rm=T)*sum(rowB,na.rm=T)))
}
for(i in 1:nrow(MS_UI)) {
weight_mat[i, ] <- apply(MS_UI, 1, weight_func, MS_UI[i, ])
print(i)
}
weight_mat[1:10,1:10]
weight_mat[4140:4150,4140:4050]
diag(weight_mat) <- 1
weight_mat[1:10,1:10]
col1 <- MS_UI[,1]
col2 <- MS_UI[,2]
MS_UI[1:20,1:2]
sum(col1,na.rm=T)
sum(col2,na.rm=T)
length(col1[!is.na(col1)])
head(col1[!is.na(col1)])
sum(weight_mat[1:10,1:10])
sim12 <- 0.8*sum(weight_mat[col1[!is.na(col1)],col2[!is.na(col2)]])/(sum(col1,na.rm=T)*sum(col2,na.rm=T))
sim12
item_sim[1:10,1:10]
sim12 <- 0.8*sum(weight_mat[col1[!is.na(col1)],col2[!is.na(col2)]])/(sum(col1,na.rm=T)*sum(col2,na.rm=T))
item_sim[1,2] <- sim12
item_sim[1:10,1:10]
sum(weight_mat[col1[!is.na(col1)],col2[!is.na(col2)]])
dim(weight_mat[col1[!is.na(col1)],col2[!is.na(col2)]])
weight_mat[col1[!is.na(col1)],col2[!is.na(col2)]][1:10,1:10]
weight_mat[1:10,1:10]
col1[!is.na(col1)]
which(!is.na(col1))
sim12 <- 0.8*sum(weight_mat[which(!is.na(col1)),which(!is.na(col2))])/(sum(col1,na.rm=T)*sum(col2,na.rm=T))
item_sim[1,2] <- sim12
item_sim[1:10,1:10]
dim(weight_mat[col1[!is.na(col1)],col2[!is.na(col2)]])
sum(weight_mat[col1[!is.na(col1)],col2[!is.na(col2)]])
dim(weight_mat[which(!is.na(col1)),which(!is.na(col2))])
sum(weight_mat[col1[!is.na(col1)],col2[!is.na(col2)]])
sum(weight_mat[which(!is.na(col1)),which(!is.na(col2))])
item_sim[1:10,1:10]
sim_func <- function(col1, col2) {
return(0.8*sum(weight_mat[which(!is.na(col1)),which(!is.na(col2))])/(sum(col1,na.rm=T)*sum(col2,na.rm=T)))
}
for(i in 1:ncol(MS_UI)) {
item_sim[i, ] <- apply(MS_UI, 1, sim_func, MS_UI[,i])
print(i)
}
sim_func <- function(col1, col2) {
return(0.8*sum(weight_mat[which(!is.na(col1)),which(!is.na(col2))])/(sum(col1,na.rm=T)*sum(col2,na.rm=T)))
}
for(i in 1:ncol(MS_UI)) {
item_sim[i, ] <- apply(MS_UI, 2, sim_func, MS_UI[,i])
print(i)
}
item_sim[1:10,1:10]
diag(item_sim) <- 1
item_sim[1:10,1:10]
head(rowA,20)
head(rowB,20)
sum(rowA,na.rm=T)
sum(rowB,na.rm=T)
dim(item_sim[which(!is.na(rowA)),which(!is.na(rowB))])
sum(item_sim[which(!is.na(rowA)),which(!is.na(rowB))])
weight_func <- function(rowA, rowB) {
return(0.8*sum(item_sim[which(!is.na(rowA)),which(!is.na(rowB))])/(sum(rowA,na.rm=T)*sum(rowB,na.rm=T)))
}
for(i in 1:nrow(MS_UI)) {
weight_mat[i, ] <- apply(MS_UI, 1, weight_func, MS_UI[i, ])
print(i)
}
#diag(weight_mat) <- 1
weight_mat[1:10,1:10]
diag(weight_mat) <- 1
weight_mat[1:10,1:10]
for (iter in 1:5){
print(iter)
}
dim(MS_sim_msd)
dim(MS_sim_spearman)
setwd("E:/GitHub/project-3-algorithms-project-3-algorithms-group-3")
source("E:/GitHub/project-3-algorithms-project-3-algorithms-group-3/lib/functions.R")
MS_sim_simrank <- calc_simrank(MS_UI)
save(MS_sim_simrank, file = "MS_sim_simrank.RData")
MS_sim_simrank[1:10,1:10]
MS_sim_msd[1:10,1:10]
movie_sim_simrank <- calc_simrank(movie_UI)
movie_sim_simrank <- calc_simrank(movie_UI)
